import React from 'react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler
} from 'chart.js';
import { Line, Bar, Doughnut } from 'react-chartjs-2';
import { useTheme } from '../../context/ThemeContext';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler
);

interface ChartData {
  labels: string[];
  datasets: Array<{
    label: string;
    data: number[];
    backgroundColor?: string | string[];
    borderColor?: string | string[];
    fill?: boolean;
    tension?: number;
    borderWidth?: number;
  }>;
}

interface DashboardChartsProps {
  paymentsData?: ChartData;
  debtData?: ChartData;
  abonentsData?: ChartData;
  waterQualityData?: ChartData;
}

export function DashboardCharts({ 
  paymentsData, 
  debtData, 
  abonentsData, 
  waterQualityData 
}: DashboardChartsProps) {
  const { isDark, colors } = useTheme();

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        labels: {
          color: isDark ? colors.text : colors.text,
          font: {
            size: 12
          }
        }
      },
      tooltip: {
        backgroundColor: isDark ? colors.surface : colors.background,
        titleColor: isDark ? colors.text : colors.text,
        bodyColor: isDark ? colors.textSecondary : colors.textSecondary,
        borderColor: isDark ? colors.border : colors.border,
        borderWidth: 1
      }
    },
    scales: {
      x: {
        ticks: {
          color: isDark ? colors.textSecondary : colors.textSecondary
        },
        grid: {
          color: isDark ? colors.border : colors.border
        }
      },
      y: {
        ticks: {
          color: isDark ? colors.textSecondary : colors.textSecondary,
          callback: function(value: any) {
            return new Intl.NumberFormat('ru-RU').format(value) + ' —Å–æ–º';
          }
        },
        grid: {
          color: isDark ? colors.border : colors.border
        }
      }
    }
  };

  // –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const defaultPaymentsData: ChartData = {
    labels: ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω'],
    datasets: [
      {
        label: '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
        data: [45000, 52000, 48000, 61000, 55000, 68000],
        borderColor: colors.success,
        backgroundColor: colors.success + '20',
        fill: true,
        tension: 0.4
      },
      {
        label: '–†–∞—Å—Ö–æ–¥—ã',
        data: [38000, 42000, 39000, 45000, 41000, 48000],
        borderColor: colors.error,
        backgroundColor: colors.error + '20',
        fill: true,
        tension: 0.4
      }
    ]
  };

  const defaultDebtData: ChartData = {
    labels: ['–ó–æ–Ω–∞ 1', '–ó–æ–Ω–∞ 2', '–ó–æ–Ω–∞ 3', '–ó–æ–Ω–∞ 4', '–ó–æ–Ω–∞ 5'],
    datasets: [
      {
        label: '–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å',
        data: [125000, 89000, 156000, 72000, 103000],
        backgroundColor: [
          colors.error,
          colors.warning,
          colors.error,
          colors.success,
          colors.warning
        ],
        borderColor: isDark ? colors.border : colors.border,
        borderWidth: 1
      }
    ]
  };

  const defaultAbonentsData: ChartData = {
    labels: ['–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', '–ù–æ–≤—ã–µ', '–í –¥–æ–ª–≥—É'],
    datasets: [
      {
        label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        data: [650, 45, 28, 123],
        backgroundColor: [
          colors.success,
          colors.error,
          colors.accent,
          colors.warning
        ],
        borderColor: isDark ? colors.border : colors.border,
        borderWidth: 2
      }
    ]
  };

  const defaultWaterQualityData: ChartData = {
    labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
    datasets: [
      {
        label: 'pH —É—Ä–æ–≤–µ–Ω—å',
        data: [7.2, 7.1, 7.3, 7.0, 7.2, 7.1, 7.3],
        borderColor: colors.accent,
        backgroundColor: colors.accent + '20',
        fill: false,
        tension: 0.3
      },
      {
        label: '–ú—É—Ç–Ω–æ—Å—Ç—å (NTU)',
        data: [0.8, 1.2, 0.9, 1.1, 0.7, 0.8, 0.9],
        borderColor: colors.warning,
        backgroundColor: colors.warning + '20',
        fill: false,
        tension: 0.3
      }
    ]
  };

  const displayPaymentsData = paymentsData || defaultPaymentsData;
  const displayDebtData = debtData || defaultDebtData;
  const displayAbonentsData = abonentsData || defaultAbonentsData;
  const displayWaterQualityData = waterQualityData || defaultWaterQualityData;

  return (
    <div className="space-y-6">
      {/* –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π */}
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
          üí∞ –î–∏–Ω–∞–º–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        </h3>
        <div className="h-80">
          <Line data={displayPaymentsData} options={chartOptions} />
        </div>
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∑–æ–Ω–∞–º */}
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
          üìä –ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∑–æ–Ω–∞–º
        </h3>
        <div className="h-80">
          <Bar data={displayDebtData} options={chartOptions} />
        </div>
      </div>

      {/* –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ */}
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
          üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤
        </h3>
        <div className="h-80 flex justify-center">
          <Doughnut 
            data={displayAbonentsData} 
            options={{
              ...chartOptions,
              plugins: {
                ...chartOptions.plugins,
                legend: {
                  ...chartOptions.plugins.legend,
                  position: 'bottom' as const
                }
              }
            }} 
          />
        </div>
      </div>

      {/* –ì—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã */}
      <div className="bg-white dark:bg-slate-800 rounded-lg shadow-lg p-6">
        <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
          üíß –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã (–Ω–µ–¥–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
        </h3>
        <div className="h-80">
          <Line data={displayWaterQualityData} options={chartOptions} />
        </div>
      </div>
    </div>
  );
}

export default DashboardCharts; 