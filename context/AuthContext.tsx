
import React, { createContext, useContext, useEffect, useState } from 'react';
import { User, Role } from '../types';

interface AuthContextType {
  user: User | null;
  setUser: (user: User) => void;
  login: (pin: string) => Promise<boolean>;
  logout: () => void;
  loading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: React.ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const savedUser = localStorage.getItem('user');
    if (savedUser) {
      try {
        const parsedUser = JSON.parse(savedUser);
        if (parsedUser && parsedUser.role) {
          setUser(parsedUser);
        }
      } catch (error) {
        console.error('Error parsing saved user:', error);
        localStorage.removeItem('user');
      }
    }
    setLoading(false);
  }, []);

  // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ —Å –ø—Ä—è–º—ã–º–∏ PIN-–∫–æ–¥–∞–º–∏
  const login = async (pin: string): Promise<boolean> => {
    try {
      setLoading(true);
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å PIN:', pin);
      
      // –ü—Ä—è–º—ã–µ PIN-–∫–æ–¥—ã –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
      const users: { [key: string]: User } = {
        '22222222': {
          id: '1',
          name: '–ò–Ω–∂–µ–Ω–µ—Ä',
          role: Role.Engineer,
          pin: '22222222',
          isActive: true
        },
        '11111111': {
          id: '2',
          name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          role: Role.Admin,
          pin: '11111111',
          isActive: true
        },
        '33333333': {
          id: '3',
          name: '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä',
          role: Role.Accountant,
          pin: '33333333',
          isActive: true
        }
      };
      
      console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', Object.keys(users));
      
      const userData = users[pin];
      console.log('üë§ –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userData);
      
      if (userData) {
        setUser(userData);
        localStorage.setItem('user', JSON.stringify(userData));
        console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω –¥–ª—è:', userData.name);
        return true;
      }
      
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è PIN:', pin);
      return false;
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', error);
      return false;
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
  };

  const value: AuthContextType = {
    user,
    setUser,
    login,
    logout,
    loading
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export { AuthContext };
