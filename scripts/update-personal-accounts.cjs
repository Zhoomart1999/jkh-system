const { initializeApp } = require('firebase/app');
const { getFirestore, collection, getDocs, doc, updateDoc, query, orderBy } = require('firebase/firestore');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ jkh-system-new
const firebaseConfig = {
  apiKey: "AIzaSyBBdniQX1DAdz8SJwO5SPgz8BHsXFsQeXA",
  authDomain: "jkh-system-new.firebaseapp.com",
  projectId: "jkh-system-new",
  storageBucket: "jkh-system-new.firebasestorage.app",
  messagingSenderId: "844684475393",
  appId: "1:844684475393:web:1afb72cbde9b286b545400",
  measurementId: "G-HNZMR544W1"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞
function generatePersonalAccount(index, createdAt) {
  let year, month;
  
  if (createdAt) {
    const date = new Date(createdAt);
    year = date.getFullYear().toString().slice(-2);
    month = (date.getMonth() + 1).toString().padStart(2, '0');
  } else {
    // –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é
    const now = new Date();
    year = now.getFullYear().toString().slice(-2);
    month = (now.getMonth() + 1).toString().padStart(2, '0');
  }
  
  const number = (index + 1).toString().padStart(4, '0');
  return `${year}${month}${number}`;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async function updatePersonalAccounts() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const abonentsRef = collection(db, 'abonents');
    const q = query(abonentsRef, orderBy('createdAt', 'asc'));
    const querySnapshot = await getDocs(q);
    
    const abonents = querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${abonents.length} –∞–±–æ–Ω–µ–Ω—Ç–æ–≤`);
    
    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let updated = 0;
    let skipped = 0;
    let errors = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–±–æ–Ω–µ–Ω—Ç–∞
    for (let i = 0; i < abonents.length; i++) {
      const abonent = abonents[i];
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç
        if (abonent.personalAccount) {
          console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${abonent.fullName} - —É–∂–µ –µ—Å—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç: ${abonent.personalAccount}`);
          skipped++;
          continue;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç
        const personalAccount = generatePersonalAccount(i, abonent.createdAt);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ Firestore
        const abonentRef = doc(db, 'abonents', abonent.id);
        await updateDoc(abonentRef, {
          personalAccount: personalAccount
        });
        
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ${abonent.fullName}: ${personalAccount}`);
        updated++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å Firestore
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${abonent.fullName}:`, error);
        errors++;
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updated + skipped + errors}`);
    
    if (updated > 0) {
      console.log('\nüéâ –õ–∏—Ü–µ–≤—ã–µ —Å—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
      console.log('–¢–µ–ø–µ—Ä—å –≤—Å–µ –∞–±–æ–Ω–µ–Ω—Ç—ã –∏–º–µ—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏—Ü–µ–≤—ã–µ —Å—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYMM0001');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
updatePersonalAccounts()
  .then(() => {
    console.log('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
  }); 